package eu.blky.net.http;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.ReadableByteChannel;

import org.apache.commons.io.IOUtils;
import org.eclipse.jetty.util.resource.Resource;

import cc.co.llabor.cache.Manager;
import net.bytebuddy.asm.Advice.This;
import net.sf.jsr107cache.Cache;

public class CacheResource extends Resource {
	Cache getCache = getCache();
	// TODO same as eu.blky.net.http.UrlFetchTestTest.getCache()
	public static Cache getCache() {
		Cache getCache = Manager.getCache("getCache@" + UrlFetchTestTest.class.getName());
		return getCache;
	}
	
	private String pathInContext;

	public CacheResource(String pathInContext) {
		this.pathInContext = pathInContext;
	}

	@Override
	public boolean isContainedIn(Resource r) throws MalformedURLException {
		return false; 
	}

	@Override
	public void close() {
		retval.delete();
	}

	@Override
	public boolean exists() {
		return (null != getCache.get(pathInContext)); 
	}

	@Override
	public boolean isDirectory() {
		return false; 
	}

	@Override
	public long lastModified() {
		return 0; 
	}

	@Override
	public long length() {
		return getCache.get(this.pathInContext).toString().length(); 
	}

	@Override
	public URL getURL() {
		// TODO Auto-generated method stub
			if (1 == 1) 
				throw new RuntimeException(
							"autogenerated from i1 return not checked value since Nov 23, 2018, 12:06:41 PM ;)!");
			else
				/*return*/ return null; 
	}

	File retval ;
	@Override
	public File getFile() throws IOException {
		retval = File.createTempFile("del.", ".me");
		retval .deleteOnExit();
		
		FileWriter output = new FileWriter(retval);
		byte[] data=this.getCache.get(this.pathInContext).toString().getBytes();
		IOUtils.write(data, output );
		
		output.close();
		return retval; 
	}

	@Override
	public String getName() {
		return this.pathInContext; 
	}

	@Override
	public InputStream getInputStream() throws IOException {
		return new ByteArrayInputStream(this.getCache.get(this.pathInContext).toString().getBytes()); 
	}

	@Override
	public ReadableByteChannel getReadableByteChannel() throws IOException {
		 return null; 
	}

	@Override
	public boolean delete() throws SecurityException {
		return false; 
	}

	@Override
	public boolean renameTo(Resource dest) throws SecurityException {
		return false; 
	}

	@Override
	public String[] list() {
		return null; 
	}

	@Override
	public Resource addPath(String path) throws IOException, MalformedURLException {
		return null; 
	}

}
